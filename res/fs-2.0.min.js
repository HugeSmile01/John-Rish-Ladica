// ===== FineStyle v2.0 Fixed & Enhanced =====

// Capture any existing API
const _oldFine = window.FineStyle || {};

const FineStyle = (() => {
  // ----- Advanced State Management -----
  class Store {
    constructor(state = {}) {
      this.state = new Proxy(state, {
        set: (target, key, value) => {
          target[key] = value;
          this._notify(key);
          return true;
        }
      });
      this.subscribers = {};
    }
    subscribe(key, callback) {
      this.subscribers[key] = this.subscribers[key] || [];
      this.subscribers[key].push(callback);
    }
    _notify(key) {
      (this.subscribers[key] || []).forEach(cb => cb(this.state[key]));
    }
  }

  // ----- Web Animation API Integration -----
  const animate = {
    fadeIn(target, duration = 300) {
      return target.animate(
        [{ opacity: 0 }, { opacity: 1 }],
        { duration }
      );
    },
    slide(target, direction = 'right', duration = 500) {
      const offset = direction === 'right' ? '100%' : '-100%';
      return target.animate(
        [{ transform: `translateX(${offset})` }, { transform: 'translateX(0)' }],
        { duration }
      );
    }
  };

  // ----- Advanced Components -----
  const components = {
    initCarousels() {
      class Carousel {
        constructor(el) {
          this.carousel = el;
          this.items = [...el.querySelectorAll('.fs-carousel-item')];
          this.current = 0;
          this.startX = 0;
          this._bind();
          this._show();
        }
        _bind() {
          this.carousel.addEventListener('touchstart', e => this.startX = e.changedTouches[0].screenX);
          this.carousel.addEventListener('touchend', e => this._swipe(e.changedTouches[0].screenX));
        }
        _swipe(endX) {
          if (Math.abs(endX - this.startX) < 50) return;
          this.current = endX < this.startX ? this._next() : this._prev();
          this._show();
        }
        _next() { return (this.current + 1) % this.items.length; }
        _prev() { return (this.current - 1 + this.items.length) % this.items.length; }
        _show() {
          this.items.forEach((i, idx) => i.classList.toggle('fs-active', idx === this.current));
          animate.slide(this.items[this.current]);
        }
      }
      document.querySelectorAll('.fs-carousel').forEach(el => new Carousel(el));
    },
    initSortableTables() {
      document.querySelectorAll('.fs-table-sortable th').forEach(th => {
        th.addEventListener('click', () => {
          const tbl = th.closest('table');
          const idx = Array.from(th.parentNode.children).indexOf(th);
          const asc = th.classList.toggle('fs-sort-asc');
          const rows = Array.from(tbl.tBodies[0].rows).sort((a, b) => {
            const v1 = a.cells[idx].textContent;
            const v2 = b.cells[idx].textContent;
            return asc ? v1.localeCompare(v2) : v2.localeCompare(v1);
          });
          tbl.tBodies[0].append(...rows);
        });
      });
    },
    initLazyLoad() {
      const obs = new IntersectionObserver(entries => {
        entries.forEach(entry => {
          if (!entry.isIntersecting) return;
          const img = entry.target;
          img.src = img.getAttribute('data-src');
          img.classList.add('fs-loaded');
          obs.unobserve(img);
        });
      });
      document.querySelectorAll('img[data-src]').forEach(img => obs.observe(img));
    }
  };

  // ----- Toast Notification System -----
  function _initToasts() {
    if (!document.querySelector('.fs-toast-container')) {
      const c = document.createElement('div');
      c.className = 'fs-toast-container';
      Object.assign(c.style, {
        position: 'fixed', top: '1rem', right: '1rem',
        display: 'flex', flexDirection: 'column', gap: '0.5rem', zIndex: 10000
      });
      document.body.appendChild(c);
    }
  }
  function toast(message, opts = {}) {
    const { duration = 3000 } = opts;
    _initToasts();
    const t = document.createElement('div');
    t.className = 'fs-toast';
    t.textContent = message;
    Object.assign(t.style, {
      background: 'rgba(0,0,0,0.8)', color: '#fff',
      padding: '0.75rem 1rem', borderRadius: '4px',
      opacity: '0', transition: 'opacity 0.3s ease'
    });
    const container = document.querySelector('.fs-toast-container');
    container.appendChild(t);
    requestAnimationFrame(() => t.style.opacity = '1');
    setTimeout(() => {
      t.style.opacity = '0';
      t.addEventListener('transitionend', () => t.remove());
    }, duration);
  }

  // ----- Public API -----
  return {
    ..._oldFine,
    Store: new Store(),

    // Lifecycle Hooks
    init() {
      components.initCarousels();
      components.initSortableTables();
      components.initLazyLoad();
    },
    initAdvanced() {
      this.init();
      _oldFine.init?.();
    },

    // Core Utilities
    createComponent(name, cfg) {
      class FC extends HTMLElement {
        constructor() { super(); cfg.constructor?.(this); }
        connectedCallback() { cfg.onMount?.(this); }
        disconnectedCallback() { cfg.onUnmount?.(this); }
      }
      customElements.define(`fs-${name}`, FC);
    },
    async fetchComponent(url, target) {
      const res = await fetch(url), txt = await res.text();
      const doc = new DOMParser().parseFromString(txt, 'text/html');
      target.replaceWith(...doc.body.children);
    },
    debounce(fn, delay = 300) {
      let to;
      return (...a) => {
        clearTimeout(to);
        to = setTimeout(() => fn(...a), delay);
      };
    },

    // Toasts
    toast,

    // Expose animation for custom use
    animate
  };
})();

/*
 FineStyle Framework JS Enhancements
 Smooth UI interactions, responsive menu toggle, scroll animations
*/

// Responsive Navbar Toggle
document.addEventListener('DOMContentLoaded', function () {
  const toggle = document.querySelector('.menu-toggle');
  const navLinks = document.querySelector('.nav-links');

  if (toggle && navLinks) {
    toggle.addEventListener('click', () => {
      navLinks.classList.toggle('active');
    });
  }

  // Animate elements on scroll
  const scrollElements = document.querySelectorAll('.animate-on-scroll');
  const observer = new IntersectionObserver(entries => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('visible');
        observer.unobserve(entry.target);
      }
    });
  }, { threshold: 0.1 });

  scrollElements.forEach(el => observer.observe(el));
});

// Smooth Scroll for anchor links
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
  anchor.addEventListener('click', function (e) {
    const target = document.querySelector(this.getAttribute('href'));
    if (target) {
      e.preventDefault();
      target.scrollIntoView({ behavior: 'smooth' });
    }
  });
});


// Expose globally
document.addEventListener('DOMContentLoaded', () => {
  window.FineStyle = FineStyle;
});
